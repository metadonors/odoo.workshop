<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>La prima applicazione on Odoo Workshop</title>
    <link>https://metadonors.github.io/odoo.workshop/first_app/</link>
    <description>Recent content in La prima applicazione on Odoo Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>it-it</language>
    <lastBuildDate>Wed, 27 Jun 2018 16:13:21 +0200</lastBuildDate><atom:link href="https://metadonors.github.io/odoo.workshop/first_app/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Scaffolding</title>
      <link>https://metadonors.github.io/odoo.workshop/first_app/primo_modulo/</link>
      <pubDate>Wed, 27 Jun 2018 17:59:32 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/first_app/primo_modulo/</guid>
      <description>In questa sezione andremo a creare il nostro primo modulo. L&amp;rsquo;applicazione d&amp;rsquo;esempio che creeremo durante il corso è una classica Todo App. Per realizzarla attraverseremo le classiche fasi di sviluppo di un applicazione Odoo.
Lo scheletro del modulo Odoo offre un suo meccanismo di scaffolding piuttosto primitivo per creare nuovi moduli, è possibile visualizzare il suo funzionamento lanciando questo comando dalla cartella contente l&amp;rsquo;ambiente odoo.dockerenv:
$ docker compose run odoo odoo scaffold --help Nella pratica ci sono altri strumenti utili per questo scopo come, mrbob con i template specifici per gli addon Odoo.</description>
    </item>
    
    <item>
      <title>I modelli</title>
      <link>https://metadonors.github.io/odoo.workshop/first_app/primo_modello/</link>
      <pubDate>Thu, 28 Jun 2018 10:36:46 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/first_app/primo_modello/</guid>
      <description>Ora che abbiamo la nostra prima applicazione iniziamo ad aggiungere un semplice modello.
I modelli sono la M del paradigma MVC, rappresento i dati su cui la nostra applicazione lavora. Sono dei modelli i Prodotti, le Fatture, i Clienti, etc.
I modelli sono descritti da classi Python che ereditano da una classe generica del framework Odoo le loro funzionalità base. Il loro compito principale è quello di tradurre il loro schema sulle tabelle del database.</description>
    </item>
    
    <item>
      <title>Le viste</title>
      <link>https://metadonors.github.io/odoo.workshop/first_app/prime_viste/</link>
      <pubDate>Thu, 28 Jun 2018 10:38:52 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/first_app/prime_viste/</guid>
      <description>Le viste descrivono l&amp;rsquo;interfaccia utente. Ogni vista è strutturata in un file XML, che viene utilizzato dal client web per generare le pagine HTML in grado di gestire i dati generati dal nostro backend.
Nelle viste abbiamo dei menu item che ci permettono di attivare funzionalità o navigazione scatenando delle actions. Per esempio, il menu item Users processa una action chiamata anchessa Users, che renderizza le viste per la gestione degli utenti.</description>
    </item>
    
    <item>
      <title>La logica</title>
      <link>https://metadonors.github.io/odoo.workshop/first_app/prima_funzione/</link>
      <pubDate>Thu, 28 Jun 2018 10:38:58 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/first_app/prima_funzione/</guid>
      <description>A questo punto è arrivato il momento di aggiungere della logica applicativa al nostro modulo. Per farlo possiamo sfruttare i bottoni che abbiamo aggiunto nella sezione precedente relativa alle viste.
Aggiungere la logica applicativa Nella precedente sezione abbiamo aggiunto due bottoni per invocare delle funzioni Python sul nostro backend. Riporto qui il codice interessato per comodità.
&amp;lt;button name=&amp;#34;do_toggle_button&amp;#34; type=&amp;#34;object&amp;#34; string=&amp;#34;Toggle Done&amp;#34; class=&amp;#34;oe_highlight&amp;#34;/&amp;gt; In questo tag stiamo definendo alcuni attributi, vediamoli nel dettaglio:</description>
    </item>
    
    <item>
      <title>Controllo Accessi</title>
      <link>https://metadonors.github.io/odoo.workshop/first_app/controllo_accessi/</link>
      <pubDate>Thu, 28 Jun 2018 10:40:25 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/first_app/controllo_accessi/</guid>
      <description>Nella scorsa sezione abbiamo terminato la creazione del nostro modulo base. Al termine abbiamo notato che Odoo si lamentava dicendo che non abbiamo specificato delle regole di accesso per il modello da noi creato
WARNING odoo odoo.modules.loading: The models [&#39;todo.task&#39;] have no access rules in module todo_app, consider adding some, like: id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink In Odoo tutti i modelli devono avere delle regole di accesso specificate, in caso contrario solo l&amp;rsquo;utente admin potrà accedere ai dati relativi a quel modello.</description>
    </item>
    
  </channel>
</rss>

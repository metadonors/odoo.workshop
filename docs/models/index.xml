<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>I Modelli on Odoo Workshop</title>
    <link>https://metadonors.github.io/odoo.workshop/models/</link>
    <description>Recent content in I Modelli on Odoo Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>it-it</language>
    <lastBuildDate>Wed, 27 Jun 2018 16:13:21 +0200</lastBuildDate>
    <atom:link href="https://metadonors.github.io/odoo.workshop/models/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Preambolo</title>
      <link>https://metadonors.github.io/odoo.workshop/models/preambolo/</link>
      <pubDate>Thu, 28 Jun 2018 16:39:19 +0200</pubDate>
      <guid>https://metadonors.github.io/odoo.workshop/models/preambolo/</guid>
      <description>Per andare a esplorare cosa possiamo fare con i nostri modelli prepariamoci prima un nuovo modulo che estende gli esistenti. Per analizzare come funzionano le relazioni aggiungeremo anche un paio di modelli.&#xA;TodoProjects progetti per raggruppare i task TodoTag tag per poter classificare i vari task Abbiamo gia&amp;rsquo; un modulo preparato con queste modifiche, l&amp;rsquo;unica cosa che dobbiamo fare è scaricarlo nella nostra directory addons.&#xA;Per farlo, da terminale, entriamo nella cartella addons</description>
    </item>
    <item>
      <title>Campi Base</title>
      <link>https://metadonors.github.io/odoo.workshop/models/campi_base/</link>
      <pubDate>Thu, 28 Jun 2018 16:52:23 +0200</pubDate>
      <guid>https://metadonors.github.io/odoo.workshop/models/campi_base/</guid>
      <description>L&amp;rsquo;ORM di Odoo permette di creare modelli complessi composti da attributi basa su tipi di campi semplici. Questi campi mappano direttamente sul database e, in base al tipo, possono avere comportamenti differenti a livello di interfaccia utente. I campi di testo verranno renderizzati come semplici tag &amp;lt;input&amp;gt;, le date presenteranon un calendario, le selezioni multiple un tag &amp;lt;select&amp;gt; e così via.&#xA;Tipi di Campi Ogni tipo di campo ha può accettare una serie di parametri che variano il suo comportamento.</description>
    </item>
    <item>
      <title>Relazioni</title>
      <link>https://metadonors.github.io/odoo.workshop/models/relazioni/</link>
      <pubDate>Thu, 28 Jun 2018 16:52:26 +0200</pubDate>
      <guid>https://metadonors.github.io/odoo.workshop/models/relazioni/</guid>
      <description>Abbiamo visto come lavoare con tipi di campi non relazionali, ma nelle applicazioni reali una buona parte delle strutture dati descrivono relazioni fra le entità. L&amp;rsquo;ORM di Odoo è in grado di gestire i vari tipi di relazioni fra oggetti, mettendo a disposizione un set di funzionalità pronte all&amp;rsquo;uso.&#xA;Per avere chiaro cosa stiamo per fare, chiariamo cosa vogliamo costruire. Finora abbiamo lavorato con l&amp;rsquo;oggetto TodoTask. Adesso aggiungeremo il modello TodoProject che raggruppa i Task, e il modello TodoTag che li classifica.</description>
    </item>
    <item>
      <title>Computed Fields</title>
      <link>https://metadonors.github.io/odoo.workshop/models/computed_fields/</link>
      <pubDate>Thu, 28 Jun 2018 16:52:30 +0200</pubDate>
      <guid>https://metadonors.github.io/odoo.workshop/models/computed_fields/</guid>
      <description>Tutti i campi che abbiamo definito fin qui sono gestiti manualmente. L&amp;rsquo;utente entra in modalità modifica di un oggetto, aggiorna i valori e preme salva. Oddo permette però di avere altri campi il cui valore non viene definito direttamente dall&amp;rsquo;utente ma viene invece calcola attraverso una funzione.&#xA;Computed fields Un computed field viene dichiarato esattamente come i campi normali con l&amp;rsquo;unica differenza di avere un parametro compute che indica la funzione che Odoo utilizzerà per calcolarne il valore.</description>
    </item>
    <item>
      <title>Vincoli</title>
      <link>https://metadonors.github.io/odoo.workshop/models/vincoli/</link>
      <pubDate>Thu, 28 Jun 2018 16:52:30 +0200</pubDate>
      <guid>https://metadonors.github.io/odoo.workshop/models/vincoli/</guid>
      <description>Per assicurare l&amp;rsquo;integrità dei nostri dati Odoo ci fornisce due strumenti principali che possiamo applicare ai nostri modelli: Vincoli SQL e Vincoli Python.&#xA;Vincoli SQL I vincoli SQL sono aggunti direttamente alla definizione della tabella a livello di database e sono controllati quindi direttamente da PostgreSQL. Una volta configurati non sarà quindi possibile creare eccezioni per aggirarli.&#xA;Per configurare un vincolo sql si aggiunge un attributo sql_constraints che è un alista di tuple, in ogni tupla viene espresso l&amp;rsquo;identificatore del vincolo, il codice SQL per il vincolo e il messaggio di errore da usare.</description>
    </item>
  </channel>
</rss>
